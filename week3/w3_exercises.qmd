---
title: "Week 3 exercises"
pagetitle: "PRACS24: Week 3 exercises"
---

---------

<br>

In this exercise, you will primarily be practicing your Git skills.
Some tips:

- Keep checking the status of your repository (repo) with `git status`
  before and after nearly all other Git commands that you issue.
  This will help prevent mistakes, and will also help you understand Git better.
- You won't be doing anything new relative to what we did in class,
  and you can refer to those pages to see which commands and options you need to use. 

<hr style="height:1pt; visibility:hidden;" />

## Exercise

#### Local Git workflow

1. **Create a new directory at OSC.**\
   For example, `/fs/ess/PAS2714/users/$USER/week03/exercises`.

2. **Load the OSC Git module.**\
   Don't forget to do this, or you will be working with a much older version of Git. 

2. **Initialize a local Git repository** inside your new directory.

3. **Create a README file in Markdown format.**\
   The file should be named `README.md`,
   and for now, just contain a *header* saying that this is a repository for your exercises.
   
4. **Stage and then commit the README file** with an appropriate commit message.

5. **Create a second Markdown file with some more contents.**\
   Name it as you like and in it, describe the basic Git workflow and commands
   with bullet points and headers^[
   Recall that in VS Code, you can open the Markdown preview on the side,
   so you can experiment and see whether your formatting is working the way you intend.
   ].
     
6. **Create at least two commits while you work on the Markdown file.**\
   Try to break your progress up into logical units that can be
   summarized with a descriptive commit message.
   
7. **Update the `README.md` file**.\
   Briefly describe the current contents of your repo now that you actually
   have some contents.

8. **Stage and commit the updated README file.**\

9. **Create a `results` directory and make Git ignore this directory.**\
   Also, commit your `.gitignore` file.

<hr style="height:1pt; visibility:hidden;" />

#### Create and sync an online version of the repo

Phew, you made several commits! Time to share all this work with the world.

10. **Create a Github repository.**\
    Go to <https://github.com>, sign in, and create a new repository.
    It's a good idea to give it the same name as your local repo,
    but these names don't *have to* match.
    Like in class, you want to create an *empty* GitHub repository,
    because you will upload all the contents from your local repo.
    
11. **Push your local repo to the online one you just created.**\
    When you're done, click the `Code` button, and
    admire the nicely rendered README on the front page of your Github repo.

12. **Open a GitHub Issue**\
    As practice for when you need to do this for your Final Project submissions,
    open an Issue for your repo: in the Issues tab, click "New Issue",
    and in the box where you can type your issue, tag me. For example:
    
    ```markdown
    Hey @jelmerp, can you please take a look at my repo?
    ```
    
<br>

## Solutions

TBA

<br>
